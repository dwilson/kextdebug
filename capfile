# capfile
# Capistrano recipes to simplify two-machine debugging for Mac OS X
# Author: Dan Wilson (daniel.b.wilson@gmail.com)
# Copyright 2008-2009

#
# Constants
#
$kOsVersionCheetah     = 0
$kOsVersionPuma        = 1
$kOsVersionJaguar      = 2
$kOsVersionPanther     = 3
$kOsVersionTiger       = 4
$kOsVersionLeopard     = 5
$kOsVersionSnowLeopard = 6

#
# Dynamically set variables
#
set(:target_machine) do
  result = ENV['target'] || ""
  if result.empty?
    result = Capistrano::CLI.ui.ask "Enter a SSH login for the debugging target, e.g. username@hostname: "
    puts "You can avoid this prompt by exporting 'target' in your environment.\n"
  end
  result
end

set(:kext_full_path) do 
  result = ENV['kext'] || ""
  if result.empty?
    result = Capistrano::CLI.ui.ask "Enter an absolute path to the kext to debug: "
    puts "You can avoid this prompt by exporting 'kext' in your environment.\n"
  end
  result
end

set(:kext_path) do
  File.split(kext_full_path)[0]
end

set(:kext_name) do
  File.split(kext_full_path)[1]
end

set(:kext_identifier) do
  `defaults read #{kext_full_path}/Contents/Info CFBundleIdentifier`.strip!
end

#
# Recipe settings
#
# Use a pseudo-tty to prevent sudo from entering non-interactive mode on Mac OS X 10.6.
default_run_options[:pty] = true

role :targets, "#{target_machine}"

#
# Helper functions
#
def targetOsVersion
  # On Mac OS X 10.6 and later, kextutil replaces many functions of kextload
  version = Regexp.new('^10\.(\d+).*').match(capture("sw_vers -productVersion"))[1].to_i
  raise "sw_vers returned an unexpected value" unless version >= 0
  $stderr.puts "Warning: These Capistrano recipes have not been tested with this version of Mac OS X" if version <= $kOsVersionPanther
  version
end

#
# Tasks
#
namespace :easyssh do
  desc "Enable no-password SSH on a remote system"
  task :enable, :roles => :targets do
    if not File.exist?("#{ENV['HOME']}/.ssh/id_rsa.pub")
      `ssh-keygen -t rsa`
    end
    upload "#{ENV['HOME']}/.ssh/id_rsa.pub", "/tmp/debugger_host_id_rsa.pub"
    run "mkdir ~/.ssh || echo Continuing anyway..."
    run "cat /tmp/debugger_host_id_rsa.pub >> ~/.ssh/authorized_keys"
    run "rm /tmp/debugger_host_id_rsa.pub"
  end
end

namespace :nvram do
  namespace :debug do
    desc "Enable debugging on a remote system and reboot it"
    task :enable, :roles => :targets do
      on_rollback { sudo "nvram -d boot-args" }
      sudo "nvram boot-args='debug=0x14e'"
      sudo "reboot"
    end
  
    desc "Disable debugging on a remote system and reboot it"
    task :disable, :roles => :targets do
      on_rollback { sudo "nvram boot-args='debug=0x14e'" }
      sudo "nvram -d boot-args"
      sudo "reboot"
    end
    
    desc "Check current debug setting"
    task :status, :roles => :targets do
      run "nvram -p | grep boot-args | grep debug || echo Debugging is not enabled."
    end
  end
end

namespace :kext do
  desc "Deploy a kext and prepare for debugging"
  task :prepare do
    transaction do
      stop
      copy
      makesymbols
      start
    end
  end
  
  desc "Copy the kext to the target machine"
  task :copy, :roles => :targets do
    `rm -f /tmp/#{kext_name}.tar.gz`
    `tar czv -C #{kext_path} -f /tmp/#{kext_name}.tar.gz #{kext_name}`
    sudo "rm -rf /tmp/#{kext_name}.tar.gz /tmp/#{kext_name}"
    upload "/tmp/#{kext_name}.tar.gz", "/tmp/#{kext_name}.tar.gz"
    run "tar zxv -C /tmp -f /tmp/#{kext_name}.tar.gz"
    sudo "chown -R root:wheel /tmp/#{kext_name}"
  end
  
  desc "Run kextstat on the target machine"
  task :stat, :roles => :targets do
    run "kextstat"
  end
  
  desc "Start running a kext"
  task :start, :roles => :targets do
    kext_command = "kextutil"
    kext_command = "kextload" if targetOsVersion() <= $kOsVersionLeopard

    sudo "#{kext_command} -m /tmp/#{kext_name}"
  end
  
  desc "Unload a kext"
  task :stop, :roles => :targets do
    sudo "kextunload -b #{kext_identifier} || echo Continuing anyway..."
    sudo "rm -rf /tmp/*.sym"
  end
    
  desc "Generate symbols on the target and copy them back to the host"
  task :makesymbols, :roles => :targets do
    kext_command = "kextutil"
    kext_command = "kextload" if targetOsVersion() <= $kOsVersionLeopard

    sudo "#{kext_command} -ls /tmp /tmp/#{kext_name}"
    puts "Copying symbols from #{target_machine}..."
    sym_dir = "/tmp/sym-#{target_machine}-#{Time.now.strftime('%Y%m%d-%H%M%S')}"
    `mkdir #{sym_dir}`
    `scp #{target_machine}:/tmp/*.sym #{sym_dir}`
    puts "Symbol files have been copied to #{sym_dir}"
  end
end